{"name": "test_login_case[case4]", "status": "failed", "statusDetails": {"message": "AssertionError", "trace": "case = {'优先级': 'P2', '前置SQL': None, '接口地址': 'http://shop.lemonban.com:8107/p/shopCart/changeItem', '提取响应字段': None, ...}\n\n    @pytest.mark.parametrize(\"case\",case_all)\n    def test_login_case(case):  #调用登录的夹具\n        expected = case[\"预期结果\"]\n        resp = requests_api(case)  #传参 token值\n        #调用封装好的断言方法\n>       response_assert(expected,resp)\n\ntestcases\\test_cart.py:16: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntools\\handle_response_assert.py:42: in response_assert\n    raise e\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nexpected_result = {'text': '添加成功'}, response = <Response [200]>\n\n    def response_assert(expected_result,response):  # response是响应消息对象\n        logger.info(\"=============================开始断言=================================\")\n        # 判空处理\n        if expected_result is None:\n            logger.info(\"用例不需要做断言！\")\n            return  #直接返回 后面都不需要执行了。\n        expected_result = json.loads(expected_result)\n        logger.info(f\"期望结果的表示式是：{expected_result}\")\n        for k,v in expected_result.items():\n            if k.startswith(\"$\"):\n                actrual_result = jsonpath(response.json(),k)[0]\n                logger.info(f\"执行结果是：{actrual_result}\")\n                try:\n                    assert actrual_result == v\n                    logger.info(\"断言成功！\")\n                except AssertionError as e:\n                    logger.error(\"断言失败！\")\n                    raise e\n            elif k == \"text\":\n                actrual_result = response.text\n                logger.info(f\"执行结果是：{actrual_result}\")\n                try:\n>                   assert response.text == v\nE                   AssertionError\n\ntools\\handle_response_assert.py:38: AssertionError"}, "parameters": [{"name": "case", "value": "{'用例编号': '005_添加多个商品到购物车', '用例标题': '添加到购物车', '优先级': 'P2', '请求方法': 'POST', '接口地址': 'http://shop.lemonban.com:8107/p/shopCart/changeItem', '请求头': '{\"Content-Type\":\"application/json\",\"Authorization\": \"#token_type##access_token#\"}', '请求参数': '{\"basketId\": 0, \"count\": 5, \"prodId\": #prodId#, \"shopId\": 1, \"skuId\": #skuId#}', '预期结果': '{\"text\":\"添加成功\"}', '提取响应字段': None, '数据库断言': None, '前置SQL': None}"}], "start": 1717758310785, "stop": 1717758310960, "uuid": "aedb61e4-60ef-4dbc-891c-d5dfbac355e5", "historyId": "97f0a5a4aa8a57d4135f88e7a45ca8b3", "testCaseId": "269d409d20d8cbdfce907102b3faad64", "fullName": "testcases.test_cart#test_login_case", "labels": [{"name": "parentSuite", "value": "testcases"}, {"name": "suite", "value": "test_cart"}, {"name": "host", "value": "SK-20240128RSNF"}, {"name": "thread", "value": "10608-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.test_cart"}]}